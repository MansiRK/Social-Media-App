{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mitali\\\\project\\\\client\\\\src\\\\SocketClient.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { POST_TYPES } from './redux/actions/postAction';\nimport { GLOBALTYPES } from './redux/actions/globalTypes';\nimport { NOTIFY_TYPES } from './redux/actions/notifyAction';\n// import { MESS_TYPES } from './redux/actions/messageAction'\n\nimport audiobell from './audio/got-it-done-613.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst spawnNotification = (body, icon, url, title) => {\n  let options = {\n    body,\n    icon\n  };\n  let n = new Notification(title, options);\n  n.onclick = e => {\n    e.preventDefault();\n    window.open(url, '_blank');\n  };\n};\nconst SocketClient = () => {\n  _s();\n  const {\n    auth,\n    socket,\n    notify,\n    online\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const audioRef = useRef();\n\n  // joinUser\n  // useEffect(() => {\n  //     socket.emit('joinUser', auth.user)\n  // },[socket, auth.user])\n\n  // Likes\n  useEffect(() => {\n    socket.on('likeToClient', newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off('likeToClient');\n  }, [socket, dispatch]);\n  useEffect(() => {\n    socket.on('unLikeToClient', newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off('unLikeToClient');\n  }, [socket, dispatch]);\n\n  // Comments\n  useEffect(() => {\n    socket.on('createCommentToClient', newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off('createCommentToClient');\n  }, [socket, dispatch]);\n  useEffect(() => {\n    socket.on('deleteCommentToClient', newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off('deleteCommentToClient');\n  }, [socket, dispatch]);\n\n  // Follow\n  useEffect(() => {\n    socket.on('followToClient', newUser => {\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: {\n          ...auth,\n          user: newUser\n        }\n      });\n    });\n    return () => socket.off('followToClient');\n  }, [socket, dispatch, auth]);\n  useEffect(() => {\n    socket.on('unFollowToClient', newUser => {\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: {\n          ...auth,\n          user: newUser\n        }\n      });\n    });\n    return () => socket.off('unFollowToClient');\n  }, [socket, dispatch, auth]);\n\n  // Notification\n  useEffect(() => {\n    socket.on('createNotifyToClient', message => {\n      dispatch({\n        type: NOTIFY_TYPES.CREATE_NOTIFY,\n        payload: message\n      });\n      if (notify.sound) audioRef.current.play();\n      spawnNotification(message.user.username + ' ' + message.text, message.user.avatar, message.url, 'V-NETWORK');\n    });\n    return () => socket.off('createNotifyToClient');\n  }, [socket, dispatch, notify.sound]);\n  useEffect(() => {\n    socket.on('removeNotifyToClient', message => {\n      dispatch({\n        type: NOTIFY_TYPES.REMOVE_NOTIFY,\n        payload: message\n      });\n    });\n    return () => socket.off('removeNotifyToClient');\n  }, [socket, dispatch]);\n\n  // Message\n  // useEffect(() => {\n  //     socket.on('addMessageToClient', message =>{\n  //         dispatch({type: MESS_TYPES.ADD_MESSAGE, payload: message})\n\n  //         dispatch({\n  //             type: MESS_TYPES.ADD_USER, \n  //             payload: {\n  //                 ...message.user, \n  //                 text: message.text, \n  //                 media: message.media\n  //             }\n  //         })\n  //     })\n\n  //     return () => socket.off('addMessageToClient')\n  // },[socket, dispatch])\n\n  // Check User Online / Offline\n  useEffect(() => {\n    socket.emit('checkUserOnline', auth.user);\n  }, [socket, auth.user]);\n  useEffect(() => {\n    socket.on('checkUserOnlineToMe', data => {\n      data.forEach(item => {\n        if (!online.includes(item.id)) {\n          dispatch({\n            type: GLOBALTYPES.ONLINE,\n            payload: item.id\n          });\n        }\n      });\n    });\n    return () => socket.off('checkUserOnlineToMe');\n  }, [socket, dispatch, online]);\n  useEffect(() => {\n    socket.on('checkUserOnlineToClient', id => {\n      if (!online.includes(id)) {\n        dispatch({\n          type: GLOBALTYPES.ONLINE,\n          payload: id\n        });\n      }\n    });\n    return () => socket.off('checkUserOnlineToClient');\n  }, [socket, dispatch, online]);\n\n  // Check User Offline\n  useEffect(() => {\n    socket.on('CheckUserOffline', id => {\n      dispatch({\n        type: GLOBALTYPES.OFFLINE,\n        payload: id\n      });\n    });\n    return () => socket.off('CheckUserOffline');\n  }, [socket, dispatch]);\n\n  // // Call User\n  // useEffect(() => {\n  //     socket.on('callUserToClient', data =>{\n  //         dispatch({type: GLOBALTYPES.CALL, payload: data})\n  //     })\n\n  //     return () => socket.off('callUserToClient')\n  // },[socket, dispatch])\n\n  // useEffect(() => {\n  //     socket.on('userBusy', data =>{\n  //         dispatch({type: GLOBALTYPES.ALERT, payload: {error: `${call.username} is busy!`}})\n  //     })\n\n  //     return () => socket.off('userBusy')\n  // },[socket, dispatch, call])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      ref: audioRef,\n      style: {\n        display: 'none'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: audiobell,\n        type: \"audio/mp3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(SocketClient, \"0TTwlcbfZ9Eply8xzQK/zcvpMcw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = SocketClient;\nexport default SocketClient;\nvar _c;\n$RefreshReg$(_c, \"SocketClient\");","map":{"version":3,"names":["React","useEffect","useRef","useSelector","useDispatch","POST_TYPES","GLOBALTYPES","NOTIFY_TYPES","audiobell","jsxDEV","_jsxDEV","Fragment","_Fragment","spawnNotification","body","icon","url","title","options","n","Notification","onclick","e","preventDefault","window","open","SocketClient","_s","auth","socket","notify","online","state","dispatch","audioRef","on","newPost","type","UPDATE_POST","payload","off","newUser","AUTH","user","message","CREATE_NOTIFY","sound","current","play","username","text","avatar","REMOVE_NOTIFY","emit","data","forEach","item","includes","id","ONLINE","OFFLINE","children","controls","ref","style","display","src","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Mitali/project/client/src/SocketClient.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { POST_TYPES } from './redux/actions/postAction'\nimport { GLOBALTYPES } from './redux/actions/globalTypes'\nimport { NOTIFY_TYPES } from './redux/actions/notifyAction'\n// import { MESS_TYPES } from './redux/actions/messageAction'\n\nimport audiobell from './audio/got-it-done-613.mp3'\n\n\nconst spawnNotification = (body, icon, url, title) => {\n    let options = {\n        body, icon\n    }\n    let n = new Notification(title, options)\n\n    n.onclick = e => {\n        e.preventDefault()\n        window.open(url, '_blank')\n    }\n}\n\nconst SocketClient = () => {\n    const { auth, socket, notify, online} = useSelector(state => state)\n    const dispatch = useDispatch()\n\n    const audioRef = useRef()\n\n    // joinUser\n    // useEffect(() => {\n    //     socket.emit('joinUser', auth.user)\n    // },[socket, auth.user])\n\n    // Likes\n    useEffect(() => {\n        socket.on('likeToClient', newPost =>{\n            dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost})\n        })\n\n        return () => socket.off('likeToClient')\n    },[socket, dispatch])\n\n    useEffect(() => {\n        socket.on('unLikeToClient', newPost =>{\n            dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost})\n        })\n\n        return () => socket.off('unLikeToClient')\n    },[socket, dispatch])\n\n\n    // Comments\n    useEffect(() => {\n        socket.on('createCommentToClient', newPost =>{\n            dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost})\n        })\n\n        return () => socket.off('createCommentToClient')\n    },[socket, dispatch])\n\n    useEffect(() => {\n        socket.on('deleteCommentToClient', newPost =>{\n            dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost})\n        })\n\n        return () => socket.off('deleteCommentToClient')\n    },[socket, dispatch])\n\n\n    // Follow\n    useEffect(() => {\n        socket.on('followToClient', newUser =>{\n            dispatch({type: GLOBALTYPES.AUTH, payload: {...auth, user: newUser}})\n        })\n\n        return () => socket.off('followToClient')\n    },[socket, dispatch, auth])\n\n    useEffect(() => {\n        socket.on('unFollowToClient', newUser =>{\n            dispatch({type: GLOBALTYPES.AUTH, payload: {...auth, user: newUser}})\n        })\n\n        return () => socket.off('unFollowToClient')\n    },[socket, dispatch, auth])\n\n\n    // Notification\n    useEffect(() => {\n        socket.on('createNotifyToClient', message =>{\n            dispatch({type: NOTIFY_TYPES.CREATE_NOTIFY, payload: message})\n\n            if(notify.sound) audioRef.current.play()\n            spawnNotification(\n                message.user.username + ' ' + message.text,\n                message.user.avatar,\n                message.url,\n                'V-NETWORK'\n            )\n        })\n\n        return () => socket.off('createNotifyToClient')\n    },[socket, dispatch, notify.sound])\n\n    useEffect(() => {\n        socket.on('removeNotifyToClient', message =>{\n            dispatch({type: NOTIFY_TYPES.REMOVE_NOTIFY, payload: message})\n        })\n\n        return () => socket.off('removeNotifyToClient')\n    },[socket, dispatch])\n\n\n    // Message\n    // useEffect(() => {\n    //     socket.on('addMessageToClient', message =>{\n    //         dispatch({type: MESS_TYPES.ADD_MESSAGE, payload: message})\n\n    //         dispatch({\n    //             type: MESS_TYPES.ADD_USER, \n    //             payload: {\n    //                 ...message.user, \n    //                 text: message.text, \n    //                 media: message.media\n    //             }\n    //         })\n    //     })\n\n    //     return () => socket.off('addMessageToClient')\n    // },[socket, dispatch])\n\n    // Check User Online / Offline\n    useEffect(() => {\n        socket.emit('checkUserOnline', auth.user)\n    },[socket, auth.user])\n\n    useEffect(() => {\n        socket.on('checkUserOnlineToMe', data =>{\n            data.forEach(item => {\n                if(!online.includes(item.id)){\n                    dispatch({type: GLOBALTYPES.ONLINE, payload: item.id})\n                }\n            })\n        })\n\n        return () => socket.off('checkUserOnlineToMe')\n    },[socket, dispatch, online])\n\n    useEffect(() => {\n        socket.on('checkUserOnlineToClient', id =>{\n            if(!online.includes(id)){\n                dispatch({type: GLOBALTYPES.ONLINE, payload: id})\n            }\n        })\n\n        return () => socket.off('checkUserOnlineToClient')\n    },[socket, dispatch, online])\n\n    // Check User Offline\n    useEffect(() => {\n        socket.on('CheckUserOffline', id =>{\n            dispatch({type: GLOBALTYPES.OFFLINE, payload: id})\n        })\n\n        return () => socket.off('CheckUserOffline')\n    },[socket, dispatch])\n\n\n    // // Call User\n    // useEffect(() => {\n    //     socket.on('callUserToClient', data =>{\n    //         dispatch({type: GLOBALTYPES.CALL, payload: data})\n    //     })\n\n    //     return () => socket.off('callUserToClient')\n    // },[socket, dispatch])\n\n    // useEffect(() => {\n    //     socket.on('userBusy', data =>{\n    //         dispatch({type: GLOBALTYPES.ALERT, payload: {error: `${call.username} is busy!`}})\n    //     })\n\n    //     return () => socket.off('userBusy')\n    // },[socket, dispatch, call])\n\n\n\n    return (\n        <>\n            <audio controls ref={audioRef} style={{display: 'none'}} >\n                <source src={audiobell} type=\"audio/mp3\" />\n            </audio>\n        </>\n    )\n}\n\nexport default SocketClient\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,4BAA4B;AACvD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,YAAY,QAAQ,8BAA8B;AAC3D;;AAEA,OAAOC,SAAS,MAAM,6BAA6B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGnD,MAAMC,iBAAiB,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,KAAK,KAAK;EAClD,IAAIC,OAAO,GAAG;IACVJ,IAAI;IAAEC;EACV,CAAC;EACD,IAAII,CAAC,GAAG,IAAIC,YAAY,CAACH,KAAK,EAAEC,OAAO,CAAC;EAExCC,CAAC,CAACE,OAAO,GAAGC,CAAC,IAAI;IACbA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBC,MAAM,CAACC,IAAI,CAACT,GAAG,EAAE,QAAQ,CAAC;EAC9B,CAAC;AACL,CAAC;AAED,MAAMU,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC,IAAI;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAG5B,WAAW,CAAC6B,KAAK,IAAIA,KAAK,CAAC;EACnE,MAAMC,QAAQ,GAAG7B,WAAW,CAAC,CAAC;EAE9B,MAAM8B,QAAQ,GAAGhC,MAAM,CAAC,CAAC;;EAEzB;EACA;EACA;EACA;;EAEA;EACAD,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,cAAc,EAAEC,OAAO,IAAG;MAChCH,QAAQ,CAAC;QAACI,IAAI,EAAEhC,UAAU,CAACiC,WAAW;QAAEC,OAAO,EAAEH;MAAO,CAAC,CAAC;IAC9D,CAAC,CAAC;IAEF,OAAO,MAAMP,MAAM,CAACW,GAAG,CAAC,cAAc,CAAC;EAC3C,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,CAAC,CAAC;EAErBhC,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,gBAAgB,EAAEC,OAAO,IAAG;MAClCH,QAAQ,CAAC;QAACI,IAAI,EAAEhC,UAAU,CAACiC,WAAW;QAAEC,OAAO,EAAEH;MAAO,CAAC,CAAC;IAC9D,CAAC,CAAC;IAEF,OAAO,MAAMP,MAAM,CAACW,GAAG,CAAC,gBAAgB,CAAC;EAC7C,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,CAAC,CAAC;;EAGrB;EACAhC,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,uBAAuB,EAAEC,OAAO,IAAG;MACzCH,QAAQ,CAAC;QAACI,IAAI,EAAEhC,UAAU,CAACiC,WAAW;QAAEC,OAAO,EAAEH;MAAO,CAAC,CAAC;IAC9D,CAAC,CAAC;IAEF,OAAO,MAAMP,MAAM,CAACW,GAAG,CAAC,uBAAuB,CAAC;EACpD,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,CAAC,CAAC;EAErBhC,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,uBAAuB,EAAEC,OAAO,IAAG;MACzCH,QAAQ,CAAC;QAACI,IAAI,EAAEhC,UAAU,CAACiC,WAAW;QAAEC,OAAO,EAAEH;MAAO,CAAC,CAAC;IAC9D,CAAC,CAAC;IAEF,OAAO,MAAMP,MAAM,CAACW,GAAG,CAAC,uBAAuB,CAAC;EACpD,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,CAAC,CAAC;;EAGrB;EACAhC,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,gBAAgB,EAAEM,OAAO,IAAG;MAClCR,QAAQ,CAAC;QAACI,IAAI,EAAE/B,WAAW,CAACoC,IAAI;QAAEH,OAAO,EAAE;UAAC,GAAGX,IAAI;UAAEe,IAAI,EAAEF;QAAO;MAAC,CAAC,CAAC;IACzE,CAAC,CAAC;IAEF,OAAO,MAAMZ,MAAM,CAACW,GAAG,CAAC,gBAAgB,CAAC;EAC7C,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,EAAEL,IAAI,CAAC,CAAC;EAE3B3B,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,kBAAkB,EAAEM,OAAO,IAAG;MACpCR,QAAQ,CAAC;QAACI,IAAI,EAAE/B,WAAW,CAACoC,IAAI;QAAEH,OAAO,EAAE;UAAC,GAAGX,IAAI;UAAEe,IAAI,EAAEF;QAAO;MAAC,CAAC,CAAC;IACzE,CAAC,CAAC;IAEF,OAAO,MAAMZ,MAAM,CAACW,GAAG,CAAC,kBAAkB,CAAC;EAC/C,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,EAAEL,IAAI,CAAC,CAAC;;EAG3B;EACA3B,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,sBAAsB,EAAES,OAAO,IAAG;MACxCX,QAAQ,CAAC;QAACI,IAAI,EAAE9B,YAAY,CAACsC,aAAa;QAAEN,OAAO,EAAEK;MAAO,CAAC,CAAC;MAE9D,IAAGd,MAAM,CAACgB,KAAK,EAAEZ,QAAQ,CAACa,OAAO,CAACC,IAAI,CAAC,CAAC;MACxCnC,iBAAiB,CACb+B,OAAO,CAACD,IAAI,CAACM,QAAQ,GAAG,GAAG,GAAGL,OAAO,CAACM,IAAI,EAC1CN,OAAO,CAACD,IAAI,CAACQ,MAAM,EACnBP,OAAO,CAAC5B,GAAG,EACX,WACJ,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,MAAMa,MAAM,CAACW,GAAG,CAAC,sBAAsB,CAAC;EACnD,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,EAAEH,MAAM,CAACgB,KAAK,CAAC,CAAC;EAEnC7C,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,sBAAsB,EAAES,OAAO,IAAG;MACxCX,QAAQ,CAAC;QAACI,IAAI,EAAE9B,YAAY,CAAC6C,aAAa;QAAEb,OAAO,EAAEK;MAAO,CAAC,CAAC;IAClE,CAAC,CAAC;IAEF,OAAO,MAAMf,MAAM,CAACW,GAAG,CAAC,sBAAsB,CAAC;EACnD,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,CAAC,CAAC;;EAGrB;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACAhC,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACwB,IAAI,CAAC,iBAAiB,EAAEzB,IAAI,CAACe,IAAI,CAAC;EAC7C,CAAC,EAAC,CAACd,MAAM,EAAED,IAAI,CAACe,IAAI,CAAC,CAAC;EAEtB1C,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,qBAAqB,EAAEmB,IAAI,IAAG;MACpCA,IAAI,CAACC,OAAO,CAACC,IAAI,IAAI;QACjB,IAAG,CAACzB,MAAM,CAAC0B,QAAQ,CAACD,IAAI,CAACE,EAAE,CAAC,EAAC;UACzBzB,QAAQ,CAAC;YAACI,IAAI,EAAE/B,WAAW,CAACqD,MAAM;YAAEpB,OAAO,EAAEiB,IAAI,CAACE;UAAE,CAAC,CAAC;QAC1D;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,MAAM7B,MAAM,CAACW,GAAG,CAAC,qBAAqB,CAAC;EAClD,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,EAAEF,MAAM,CAAC,CAAC;EAE7B9B,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,yBAAyB,EAAEuB,EAAE,IAAG;MACtC,IAAG,CAAC3B,MAAM,CAAC0B,QAAQ,CAACC,EAAE,CAAC,EAAC;QACpBzB,QAAQ,CAAC;UAACI,IAAI,EAAE/B,WAAW,CAACqD,MAAM;UAAEpB,OAAO,EAAEmB;QAAE,CAAC,CAAC;MACrD;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM7B,MAAM,CAACW,GAAG,CAAC,yBAAyB,CAAC;EACtD,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,EAAEF,MAAM,CAAC,CAAC;;EAE7B;EACA9B,SAAS,CAAC,MAAM;IACZ4B,MAAM,CAACM,EAAE,CAAC,kBAAkB,EAAEuB,EAAE,IAAG;MAC/BzB,QAAQ,CAAC;QAACI,IAAI,EAAE/B,WAAW,CAACsD,OAAO;QAAErB,OAAO,EAAEmB;MAAE,CAAC,CAAC;IACtD,CAAC,CAAC;IAEF,OAAO,MAAM7B,MAAM,CAACW,GAAG,CAAC,kBAAkB,CAAC;EAC/C,CAAC,EAAC,CAACX,MAAM,EAAEI,QAAQ,CAAC,CAAC;;EAGrB;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAIA,oBACIvB,OAAA,CAAAE,SAAA;IAAAiD,QAAA,eACInD,OAAA;MAAOoD,QAAQ;MAACC,GAAG,EAAE7B,QAAS;MAAC8B,KAAK,EAAE;QAACC,OAAO,EAAE;MAAM,CAAE;MAAAJ,QAAA,eACpDnD,OAAA;QAAQwD,GAAG,EAAE1D,SAAU;QAAC6B,IAAI,EAAC;MAAW;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC;EAAC,gBACV,CAAC;AAEX,CAAC;AAAA3C,EAAA,CA5KKD,YAAY;EAAA,QAC0BvB,WAAW,EAClCC,WAAW;AAAA;AAAAmE,EAAA,GAF1B7C,YAAY;AA8KlB,eAAeA,YAAY;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}