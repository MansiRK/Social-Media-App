{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData';\nexport const NOTIFY_TYPES = {\n  GET_NOTIFIES: 'GET_NOTIFIES',\n  CREATE_NOTIFY: 'CREATE_NOTIFY',\n  REMOVE_NOTIFY: 'REMOVE_NOTIFY',\n  UPDATE_NOTIFY: 'UPDATE_NOTIFY',\n  UPDATE_SOUND: 'UPDATE_SOUND',\n  DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\n};\nexport const createNotify = ({\n  message,\n  auth,\n  socket\n}) => async dispatch => {\n  try {\n    const res = await postDataAPI('notify', message, auth.token);\n    socket.emit('createNotify', {\n      ...res.data.notify,\n      user: {\n        username: auth.user.username,\n        avatar: auth.user.avatar\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};\nexport const removeNotify = ({\n  message,\n  auth,\n  socket\n}) => async dispatch => {\n  try {\n    await deleteDataAPI(`notify/${message.id}?url=${message.url}`, auth.token);\n    socket.emit('removeNotify', message);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};\nexport const getNotifies = token => async dispatch => {\n  try {\n    const res = await getDataAPI('notifies', token);\n    dispatch({\n      type: NOTIFY_TYPES.GET_NOTIFIES,\n      payload: res.data.notifies\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};\nexport const isReadNotify = ({\n  message,\n  auth\n}) => async dispatch => {\n  dispatch({\n    type: NOTIFY_TYPES.UPDATE_NOTIFY,\n    payload: {\n      ...message,\n      isRead: true\n    }\n  });\n  try {\n    await patchDataAPI(`/isReadNotify/${message._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};\nexport const deleteAllNotifies = token => async dispatch => {\n  dispatch({\n    type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES,\n    payload: []\n  });\n  try {\n    await deleteDataAPI('deleteAllNotify', token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","deleteDataAPI","getDataAPI","patchDataAPI","NOTIFY_TYPES","GET_NOTIFIES","CREATE_NOTIFY","REMOVE_NOTIFY","UPDATE_NOTIFY","UPDATE_SOUND","DELETE_ALL_NOTIFIES","createNotify","message","auth","socket","dispatch","res","token","emit","data","notify","user","username","avatar","err","type","ALERT","payload","error","response","removeNotify","id","url","getNotifies","notifies","isReadNotify","isRead","_id","deleteAllNotifies"],"sources":["C:/Mitali/project/client/src/redux/actions/notifyAction.js"],"sourcesContent":["import { GLOBALTYPES } from './globalTypes'\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData'\n\nexport const NOTIFY_TYPES = {\n    GET_NOTIFIES: 'GET_NOTIFIES',\n    CREATE_NOTIFY: 'CREATE_NOTIFY',\n    REMOVE_NOTIFY: 'REMOVE_NOTIFY',\n    UPDATE_NOTIFY: 'UPDATE_NOTIFY',\n    UPDATE_SOUND: 'UPDATE_SOUND',\n    DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\n}\n\nexport const createNotify = ({message, auth, socket}) => async (dispatch) => {\n    try {\n        const res = await postDataAPI('notify', message, auth.token)\n\n        socket.emit('createNotify', {\n            ...res.data.notify,\n            user: {\n                username: auth.user.username,\n                avatar: auth.user.avatar\n            }\n        })\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message}})\n    }\n}\n\nexport const removeNotify = ({message, auth, socket}) => async (dispatch) => {\n    try {\n        await deleteDataAPI(`notify/${message.id}?url=${message.url}`, auth.token)\n        \n        socket.emit('removeNotify', message)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message}})\n    }\n}\n\nexport const getNotifies = (token) => async (dispatch) => {\n    try {\n        const res = await getDataAPI('notifies', token)\n        \n        dispatch({ type: NOTIFY_TYPES.GET_NOTIFIES, payload: res.data.notifies })\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message}})\n    }\n}\n\n\nexport const isReadNotify = ({message, auth}) => async (dispatch) => {\n    dispatch({type: NOTIFY_TYPES.UPDATE_NOTIFY, payload: {...message, isRead: true}})\n    try {\n        await patchDataAPI(`/isReadNotify/${message._id}`, null, auth.token)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message}})\n    }\n}\n\nexport const deleteAllNotifies = (token) => async (dispatch) => {\n    dispatch({type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES, payload: []})\n    try {\n        await deleteDataAPI('deleteAllNotify', token)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message}})\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}