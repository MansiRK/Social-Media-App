{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from './globalTypes';\nimport { POST_TYPES } from './postAction';\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData';\nimport { createNotify, removeNotify } from '../actions/notifyAction';\nexport const createComment = ({\n  post,\n  newComment,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = {\n    ...post,\n    comments: [...post.comments, newComment]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    const data = {\n      ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postDataAPI('comment', data, auth.token);\n    const newData = {\n      ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = {\n      ...post,\n      comments: [...post.comments, newData]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    // Socket\n    socket.emit('createComment', newPost);\n\n    // Notify\n    const message = {\n      id: res.data.newComment._id,\n      text: newComment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n      recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      message,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};\nexport const updateComment = ({\n  comment,\n  post,\n  content,\n  auth\n}) => async dispatch => {\n  const newComments = EditData(post.comments, comment._id, {\n    ...comment,\n    content\n  });\n  const newPost = {\n    ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    patchDataAPI(`comment/${comment._id}`, {\n      content\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};\nexport const likeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = {\n    ...comment,\n    likes: [...comment.likes, auth.user]\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = {\n    ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};\nexport const unLikeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = {\n    ...comment,\n    likes: DeleteData(comment.likes, auth.user._id)\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = {\n    ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};\nexport const deleteComment = ({\n  post,\n  comment,\n  auth,\n  socket\n}) => async dispatch => {\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n  const newPost = {\n    ...post,\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit('deleteComment', newPost);\n  try {\n    deleteArr.forEach(item => {\n      deleteDataAPI(`comment/${item._id}`, auth.token);\n      const message = {\n        id: item._id,\n        text: comment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n        recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        message,\n        auth,\n        socket\n      }));\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.message\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","postDataAPI","patchDataAPI","deleteDataAPI","createNotify","removeNotify","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","message","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"sources":["C:/Mitali/project/client/src/redux/actions/commentAction.js"],"sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from './globalTypes'\nimport { POST_TYPES } from './postAction'\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData'\nimport { createNotify, removeNotify } from '../actions/notifyAction'\n\n\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\n    const newPost = {...post, comments: [...post.comments, newComment]}\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n    try {\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\n        const res = await postDataAPI('comment', data, auth.token)\n\n        const newData = {...res.data.newComment, user: auth.user}\n        const newPost = {...post, comments: [...post.comments, newData]}\n        dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n        // Socket\n        socket.emit('createComment', newPost)\n\n        // Notify\n        const message = {\n            id: res.data.newComment._id,\n            text: newComment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n            recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n            url: `/post/${post._id}`,\n            content: post.content, \n            image: post.images[0].url\n        }\n\n        dispatch(createNotify({message, auth, socket}))\n        \n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message} })\n    }\n}\n\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\n    const newComments = EditData(post.comments, comment._id, {...comment, content})\n    const newPost = {...post, comments: newComments}\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n    try {\n        patchDataAPI(`comment/${comment._id}`, { content }, auth.token)\n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message} })\n    }\n}\n\nexport const likeComment = ({comment, post, auth}) => async (dispatch) => {\n    const newComment = {...comment, likes: [...comment.likes, auth.user]}\n\n    const newComments = EditData(post.comments, comment._id, newComment)\n\n    const newPost = {...post, comments: newComments}\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n    try {\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token)\n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message} })\n    }\n}\n\nexport const unLikeComment = ({comment, post, auth}) => async (dispatch) => {\n\n    const newComment = {...comment, likes: DeleteData(comment.likes, auth.user._id)}\n\n    const newComments = EditData(post.comments, comment._id, newComment)\n\n    const newPost = {...post, comments: newComments}\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n    try {\n        await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token)\n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message} })\n    }\n}\n\nexport const deleteComment = ({post, comment, auth, socket}) => async (dispatch) => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment]\n    \n    const newPost = {\n        ...post,\n        comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    }\n\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n    socket.emit('deleteComment', newPost)\n    try {\n       deleteArr.forEach(item => {\n            deleteDataAPI(`comment/${item._id}`, auth.token)\n\n            const message = {\n                id: item._id,\n                text: comment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n                recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n                url: `/post/${post._id}`,\n            }\n    \n            dispatch(removeNotify({message, auth, socket}))\n       })\n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.message} })\n    }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}